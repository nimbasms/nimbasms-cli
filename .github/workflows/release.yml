name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build (${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            asset_name: nimbasms-linux-amd64
            pyinstaller_args: --add-data "src:src"
          - os: ubuntu-latest
            arch: arm64
            asset_name: nimbasms-linux-arm64
            pyinstaller_args: --add-data "src:src"
          - os: macos-latest
            arch: amd64
            asset_name: nimbasms-darwin-amd64
            pyinstaller_args: --target-arch x86_64 --add-data "src:src"
          - os: macos-latest
            arch: arm64
            asset_name: nimbasms-darwin-arm64
            pyinstaller_args: --target-arch arm64 --add-data "src:src"
          - os: windows-latest
            arch: amd64
            asset_name: nimbasms-windows-amd64.exe
            pyinstaller_args: --add-data "src;src"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Debug environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Python version: $(python --version)"
          echo "Pip version: $(pip --version)"
          echo "Poetry version: $(poetry --version)"
          echo "Architecture: $(uname -m)"

      - name: Build binary
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.15"
          ARCHFLAGS: "-arch x86_64"
        run: |
          poetry run pip install pyinstaller
          poetry run pyinstaller src/cli.py --clean --onefile ${{ matrix.pyinstaller_args }} --name ${{ matrix.asset_name }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.asset_name }}*
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare binaries for release
        run: |
          chmod +x nimbasms-linux-amd64/nimbasms-linux-amd64 || true
          chmod +x nimbasms-linux-arm64/nimbasms-linux-arm64 || true
          chmod +x nimbasms-darwin-amd64/nimbasms-darwin-amd64 || true
          chmod +x nimbasms-darwin-arm64/nimbasms-darwin-arm64 || true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            nimbasms-linux-amd64/nimbasms-linux-amd64
            nimbasms-linux-arm64/nimbasms-linux-arm64
            nimbasms-darwin-amd64/nimbasms-darwin-amd64
            nimbasms-darwin-arm64/nimbasms-darwin-arm64
            nimbasms-windows-amd64.exe/nimbasms-windows-amd64.exe
